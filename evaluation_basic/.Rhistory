# Chunk 1: setup
#install.packages(c("ICC","devtools","randomizr","multiwayvcov","Hmisc", "compareGroups"), repos = "http://cran.us.r-project.org")
list.of.packages <- c("tidyverse", "haven", "here", "kableExtra","rstudioapi","DescTools","qwraps2","data.table","stargazer","readxl","dplyr","rootSolve","ICC", "randomizr", "multiwayvcov", "lmtest", "knitr","devtools", "Hmisc", "compareGroups")
lapply(list.of.packages, library, character.only = TRUE)
devtools::install_github('vikjam/pwrcalc')
## If you have trouble installing pwrcalc, you can download it manually by using the .tar.gz file provided.
## To install it manually, go to "Packages", select "Install" and then "Package Archive" in the install menu.
knitr::opts_knit$set(root.dir = here())
knitr::opts_chunk$set(echo = T, eval = T, message = F, warning = F, fig.pos = "H", fig.height = 3.5, fig.width = 3.5)
print_code <- TRUE
# Chunk 1: setup
#install.packages(c("ICC","devtools","randomizr","multiwayvcov","Hmisc", "compareGroups"), repos = "http://cran.us.r-project.org")
list.of.packages <- c("tidyverse", "haven", "here", "kableExtra","rstudioapi","DescTools","qwraps2","data.table","stargazer","readxl","dplyr","rootSolve","ICC", "randomizr", "multiwayvcov", "lmtest", "knitr","devtools", "Hmisc", "compareGroups")
lapply(list.of.packages, library, character.only = TRUE)
devtools::install_github('vikjam/pwrcalc')
## If you have trouble installing pwrcalc, you can download it manually by using the .tar.gz file provided.
## To install it manually, go to "Packages", select "Install" and then "Package Archive" in the install menu.
knitr::opts_knit$set(root.dir = here())
knitr::opts_chunk$set(echo = T, eval = T, message = F, warning = F, fig.pos = "H", fig.height = 3.5, fig.width = 3.5)
print_code <- TRUE
library(pwrcalc)
data(balsakhi)
# Let us view the `balsakhi `data that we have just loaded:
View(balsakhi)
str(balsakhi)
#Generate summaries of the variables by treatment group and save results as baselines
baselines <- compareGroups(bal ~ age + gender + div + researchgroup + pre_tot + pre_math + pre_verb + sessiond+ precheated+ prehelped + prelaterpre_totnorm + pre_mathnorm + pre_verbnorm, data = balsakhi)
#Generate summaries of the variables by treatment group and save results as baselines
baselines <- compareGroups(bal ~ age + gender + div + researchgroup + pre_tot + pre_math + pre_verb + sessiond+ precheated+ prehelped + prelater + pre_totnorm + pre_mathnorm + pre_verbnorm, data = balsakhi)
#Use the createTable function to display the results saved in baselines
baseline.table <- createTable(baselines, show.ratio = FALSE, show.p.overall=TRUE)
#Display the created summary table
baseline.table
# to show ratio in table,
createTable(baselines, show.ratio=TRUE)
# to show ratio in table,
createTable(baselines, show.ratio=TRUE)
library(naniar)
miss_var_summary(balsakhi)
missing <- miss_var_summary(balsakhi)
print(tbl_df(missing), n=76)
print(missing, n=76)
# to show ratio in table,
createTable(baselines, show.ratio=TRUE)
table(balsakhi$sessiond)
print(missing, n=76)
str(balsakhi)
print(missing, n=76)
# to show ratio in table,
createTable(baselines, show.ratio=TRUE)
dat <- balsakhi %>%
mutate_if(is.character, ~ replace_na(.x, ""))
miss <- miss_var_summary(dat)
print(miss, n=76)
summary(balsakhi)
dat <- balsakhi %>%
mutate(sessiond = na_if(sessiond, ""))
dat <- balsakhi %>%
mutate(sessiond = na_if(sessiond, ""))
miss <- miss_var_summary(dat)
print(miss, n=76)
# to show ratio in table,
createTable(baselines, show.ratio=TRUE)
balsakhi[balsakhi == ""] <- NA
miss_var_summary(balsakhi)
missing <- miss_var_summary(balsakhi)
print(missing, n=76)
# select colums
base_var <- c("gender","div","researchgroup","sessiond","pre_tot","pre_math", "pre_verb","precheated","prehelped","prelater","pre_totnorm","pre_mathnorm","pre_verbnorm")
balsakhi_base <- balsakhi %>%
select(base_var)
balsakhi_base <- balsakhi %>%
select(,base_var)
balsakhi_base <- balsakhi[,balsakhi$base_var]
balsakhi_base
balsakhi_base <- balsakhi[,base_var]
balsakhi_base
missing <- miss_var_summary(balsakhi_base)
print(missing, n=76)
drop_na(balsakhi_base)
missing <- miss_var_summary(drop_na(balsakhi_base))
print(missing, n=76)
balsakhi_base_cleaned <- drop_na(balsakhi_base)
missing <- miss_var_summary(balsakhi_base_cleaned))
print(missing, n=76)
missing <- miss_var_summary(balsakhi_base_cleaned)
print(missing, n=76)
#Generate summaries of the variables by treatment group and save results as baselines
baselines <- compareGroups(bal ~ age + gender + div + researchgroup + sessiond + pre_tot + pre_math + pre_verb + precheated+ prehelped + prelater + pre_totnorm + pre_mathnorm + pre_verbnorm, data = balsakhi_base_cleaned)
# select columns
base_var <- c("bal","gender","div","researchgroup","sessiond","pre_tot","pre_math", "pre_verb","precheated","prehelped","prelater","pre_totnorm","pre_mathnorm","pre_verbnorm")
balsakhi_base <- balsakhi[,base_var]
# drop na
balsakhi_base_cleaned <- drop_na(balsakhi_base)
missing <- miss_var_summary(balsakhi_base_cleaned)
print(missing, n=76)
#Generate summaries of the variables by treatment group and save results as baselines
baselines <- compareGroups(bal ~ age + gender + div + researchgroup + sessiond + pre_tot + pre_math + pre_verb + precheated+ prehelped + prelater + pre_totnorm + pre_mathnorm + pre_verbnorm, data = balsakhi_base_cleaned)
#Generate summaries of the variables by treatment group and save results as baselines
baselines <- compareGroups(bal ~ gender + div + researchgroup + sessiond + pre_tot + pre_math + pre_verb + precheated+ prehelped + prelater + pre_totnorm + pre_mathnorm + pre_verbnorm, data = balsakhi_base_cleaned)
#Use the createTable function to display the results saved in baselines
baseline.table <- createTable(baselines, show.ratio = FALSE, show.p.overall=TRUE)
#Display the created summary table
baseline.table
# to show ratio in table,
createTable(baselines, show.ratio=TRUE)
balsakhi %>%
group_by(bal) %>%
summarise(mean_post_math=mean(post_math, na.rm=TRUE), sd_post_math=sd(post_math,na.rm=TRUE))
# Chunk 1: setup
if (TRUE) {
list.of.packages <- c("tidyverse", "haven", "here",
"kableExtra","rstudioapi","DescTools","qwraps2","data.table",
"stargazer","readxl","dplyr","rootSolve","ICC", "randomizr",
"multiwayvcov", "lmtest", "knitr","devtools", "Hmisc",
"compareGroups", "naniar")
# sapply(list.of.packages, function(x) pacman::p_load(get(x)))
new.packages <- list.of.packages[
!( list.of.packages %in% installed.packages()[,"Package"] )
]
if(length(new.packages)) install.packages(new.packages,
repos = "https://cloud.r-project.org")
lapply(list.of.packages, library, character.only = TRUE)
}
devtools::install_github('vikjam/pwrcalc')
## If you have trouble installing pwrcalc, you can download it manually by using the .tar.gz file provided.
## To install it manually, go to "Packages", select "Install" and then "Package Archive" in the install menu.
setwd(dirname(getActiveDocumentContext()$path))
knitr::opts_knit$set(root.dir = here())
knitr::opts_chunk$set(echo = T, eval = T, message = F, warning = F, fig.pos = "H", fig.height = 7, fig.width = 7)
print_code <- TRUE
# Chunk 2
library(pwrcalc)
data(balsakhi)
# Let us view the `balsakhi `data that we have just loaded:
View(balsakhi)
balsakhi %>%
group_by(bal) %>%
summarise(mean_post_math=mean(post_math, na.rm=TRUE), sd_post_math=sd(post_math,na.rm=TRUE))
balsakhi %>%
group_by(bal) %>%
summarise(mean_post_math=mean(post_math, na.rm=TRUE), sd_post_math=sd(post_math,na.rm=TRUE))
# Score change in math
bal_math <- balsakhi %>%
filter(!is.na(pre_math)&!is.na(post_math))
bal_math$diff_math <- bal_math$post_math - bal_math$pre_math
bal_math$pct_change_math <- bal_math$diff_math/bal_math$pre_math * 100
# visualize histogram
ggplot(data = bal_math, aes(x=pct_change_math))+
geom_histogram(fill="white", color="black", binwidth = 50)+
facet_wrap(~bal)+
xlab("Percentage Change in Math from Pre-test")
## new labels
labels <- c("0"="Control","1"="Treatment")
## plot
ggplot(data = bal_math, aes(x=pct_change_math))+
geom_histogram(fill="white", color="black", binwidth = 50)+
facet_grid(~bal, labeller = labeller(bal = labels))+
xlab("Percentage Change in Math from Pre-test")
balsakhi %>%
filter(!is.na(postmath1std)) %>%
count(bal,postmath1std) %>%
mutate(pct=100*n/sum(n))
table(balsakhi$postmath1std,balsakhi$bal)
prop.table(table(balsakhi$postmath1std,balsakhi$bal))
options(digits = 2)
prop.table(table(balsakhi$postmath1std,balsakhi$bal))
table(balsakhi$postmath1std,balsakhi$bal,dnn = list.names("a","b"))
table(balsakhi$postmath1std,balsakhi$bal,dnn = c("a","b"))
table(balsakhi$postmath1std,balsakhi$bal,dnn = c("Math1 Test","Treatment"))
table(balsakhi$postmath1std,balsakhi$bal,dnn = c("Math1","Treatment"))
# Tabulate with count
table(balsakhi$postmath1std,balsakhi$bal, dnn = c("Math1","Treatment"))
# Tabulate with proportion
prop.table(table(balsakhi$postmath1std,balsakhi$bal, dnn = c("Math1","Treatment")))
## If we shorten the digit
options(digits = 2)
prop.table(table(balsakhi$postmath1std,balsakhi$bal, dnn = c("Math1","Treatment")))
# Chunk 1: setup
if (TRUE) {
list.of.packages <- c("tidyverse", "haven", "here",
"kableExtra","rstudioapi","DescTools","qwraps2","data.table",
"stargazer","readxl","dplyr","rootSolve","ICC", "randomizr",
"multiwayvcov", "lmtest", "knitr","devtools", "Hmisc",
"compareGroups", "naniar")
# sapply(list.of.packages, function(x) pacman::p_load(get(x)))
new.packages <- list.of.packages[
!( list.of.packages %in% installed.packages()[,"Package"] )
]
if(length(new.packages)) install.packages(new.packages,
repos = "https://cloud.r-project.org")
lapply(list.of.packages, library, character.only = TRUE)
}
devtools::install_github('vikjam/pwrcalc')
## If you have trouble installing pwrcalc, you can download it manually by using the .tar.gz file provided.
## To install it manually, go to "Packages", select "Install" and then "Package Archive" in the install menu.
setwd(dirname(getActiveDocumentContext()$path))
knitr::opts_knit$set(root.dir = here())
knitr::opts_chunk$set(echo = T, eval = T, message = F, warning = F, fig.pos = "H", fig.height = 7, fig.width = 7)
print_code <- TRUE
# Chunk 2
library(pwrcalc)
data(balsakhi)
# Let us view the `balsakhi `data that we have just loaded:
View(balsakhi)
# Chunk 3
# Simple table of score comparison by group
balsakhi %>%
group_by(bal) %>%
summarise(mean_post_math=mean(post_math, na.rm=TRUE), sd_post_math=sd(post_math,na.rm=TRUE))
# Score change in math
bal_math <- balsakhi %>%
filter(!is.na(pre_math)&!is.na(post_math))
bal_math$diff_math <- bal_math$post_math - bal_math$pre_math
bal_math$pct_change_math <- bal_math$diff_math/bal_math$pre_math * 100
# visualize histogram
## new labels
labels <- c("0"="Control","1"="Treatment")
## plot
ggplot(data = bal_math, aes(x=pct_change_math))+
geom_histogram(fill="white", color="black", binwidth = 50)+
facet_grid(~bal, labeller = labeller(bal = labels))+ # change labels
xlab("Percentage Change in Math from Pre-test")
balsakhi %>%
filter(!is.na(postmath1std)) %>%
count(bal,postmath1std) %>%
mutate(pct=100*n/sum(n))
# Tabulate with count
table(balsakhi$postmath1std,balsakhi$bal, dnn = c("Math1","Treatment"))
# Tabulate with proportion
prop.table(table(balsakhi$postmath1std,balsakhi$bal, dnn = c("Math1","Treatment")))
## If we shorten the digit
options(digits = 2)
prop.table(table(balsakhi$postmath1std,balsakhi$bal, dnn = c("Math1","Treatment")))
bal_math %>%
filter(!is.na(postmath1std)) %>%
count(bal,postmath1std) %>%
mutate(pct=100*n/sum(n))
# Tabulate with count
table(bal_math$postmath1std,bal_math$bal, dnn = c("Math1","Treatment"))
# Tabulate with proportion
prop.table(table(bal_math$postmath1std,bal_math$bal, dnn = c("Math1","Treatment")))
bal_math <- bal_math %>%
mutate(
# Dichotomize the variable for math tests
# Generate a combined binary endpoint for having any math tests pass
combined = factor(
ifelse(
# Check for not passing standard 1 math test
postmath1std == 0 &
# ... and not passing standard 2 math test
postmath2std == 0 &
# ... and not passing standard 3 math test
postmath3std == 0,
"No Pass",
"At least one pass"
),
levels = c("No pass", "At least one pass")
)
)
# Tabulate the new composite endpoint
table(bal_math$combined, useNA = "ifany")
bal_math <- bal_math %>%
mutate(
# Dichotomize the variable for math tests
# Generate a combined binary endpoint for having any math tests pass
combined = factor(
ifelse(
# Check for not passing standard 1 math test
postmath1std == 1 &
# ... and not passing standard 2 math test
postmath2std == 1 &
# ... and not passing standard 3 math test
postmath3std == 1,
"All pass",
"At least one fail"
),
levels = c("All pass", "At least one fail")
)
)
# Tabulate the new composite endpoint
table(bal_math$combined, useNA = "ifany")
